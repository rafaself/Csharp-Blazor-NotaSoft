@page "/notas-servico/lista"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<h3>Lista de notas</h3>

<table class="table table-striped table-hover table-bordered rounded-2 overflow-hidden">
	<thead>
		<tr>
			<th scope="col">#Id</th>
			<th scope="col">Nome</th>
			<th scope="col">CPF</th>
			<th scope="col">Preço un.</th>
			<th scope="col">Quantidade</th>
			<th scope="col">Valor total</th>
		</tr>

	</thead>
	<tbody class="table-group-divider">
		@foreach (var invoice in invoices)
		{
			<tr>
				<th scope="row">@invoice.Id</th>
				<td>@invoice.Id</td>
				<td>@invoice.Name</td>
				<td>@invoice.Cpf</td>
				<td>@invoice.Price</td>
				<td>@invoice.Amount</td>
				<td>@invoice.TotalValue</td>
			</tr>
		}
	</tbody>
</table>

@code {
	List<Invoice> invoices = [];

	public class Invoice
	{
		public int Id { get; set; }
		public string Name { get; set; } = string.Empty;
		public string Cpf { get; set; } = string.Empty;
		public double Price { get; set; }
		public int Amount { get; set; }
		public double TotalValue => Price * Amount;
	}

	public async Task ListAllPosts()
	{
		var client = ClientFactory.CreateClient();

		var response = await client.GetAsync("https://localhost:7184/Invoices");

		var jsonResponse = await response.Content.ReadAsStringAsync();

		invoices = JsonSerializer.Deserialize<List<Invoice>>(jsonResponse) ?? [];

		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		await ListAllPosts();
	}

}
