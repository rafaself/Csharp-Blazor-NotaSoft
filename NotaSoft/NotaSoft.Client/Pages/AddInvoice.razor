@page "/notas-servico/adicionar"
@rendermode InteractiveWebAssembly
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject AntiforgeryStateProvider Antiforgery

<PageTitle>Notas de Serviço - Adicionar</PageTitle>

<h3>Adicionar Nota Fiscal</h3>

<hr>

<EditForm Model="InvoiceModel"
		  OnValidSubmit="OnValidSubmit"
		  OnInvalidSubmit="OnInvalidSubmit"
		  FormName="AddInvoiceForm"
		  id="add-invoice-form">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="form-content">
		<div class="input-content">
			<label for="name-input">Nome do cliente</label>
			<InputText id="name-input" class="form-input-text" @bind-Value="@InvoiceModel!.Name" />
		</div>

		<div class="input-content">
			<label for="cpf-input">CPF</label>
			<InputText id="cpf-input" class="form-input-text" @bind-Value="@InvoiceModel.Cpf" />
		</div>

		<div class="input-content">
			<label for="price-input">Preço</label>
			<InputNumber id="price-input" class="form-input-text" @bind-Value="@InvoiceModel.Price" />
		</div>

		<div class="input-content">
			<label for="amount-input">Quantidade</label>
			<InputNumber id="amount-input" class="form-input-text" @bind-Value="@InvoiceModel.Amount" />
		</div>

		<button type="submit" class="button-form mt-3">Adicionar nota</button>
	</div>

</EditForm>

<Modal @ref="modal" Title="Formulário inválido">
	<BodyTemplate>
		Preencha todos os campos corretamente.
	</BodyTemplate>
	<FooterTemplate>
		<Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Fechar</Button>
	</FooterTemplate>
</Modal>

<style>
	#add-invoice-form {
		display: flex;
		justify-content: center;
		margin-top: 32px;
	}

	.form-input-text {
		border: 1px solid #00000080;
		border-radius: 6px;
		padding: 6px;
	}

		.form-input-text:focus {
			outline: none;
			box-shadow: 0 0 10px 1px var(--color-primary-60);
			border-color: var(--color-primary-90);
		}
</style>

@code {
	[SupplyParameterFromForm]
	public Invoice? InvoiceModel { get; set; }
	private HttpClient httpClient;

	protected override void OnInitialized()
	{
		InvoiceModel ??= new();
		httpClient = Http;
	}

	public async Task Printar()
	{
		var antiforgery = Antiforgery.GetAntiforgeryToken();
		var request = new HttpRequestMessage(HttpMethod.Get, "Invoices");
		request.Headers.Add("RequestVerificationToken", antiforgery.Value);
		var response = await httpClient.SendAsync(request);
		// var response = await client.SendAsync(request);
		// var response = await httpClient.GetFromJsonAsync<List<Invoice>>("https://localhost:7184/Invoices");
		Console.WriteLine("opa");
	}

	public class Invoice
	{
		[Required]
		public string Name { get; set; } = string.Empty;
		[Required]
		public string Cpf { get; set; } = string.Empty;
		public double Price { get; set; }
		public int Amount { get; set; }
	}

	public async Task OnInvalidSubmit()
	{
		await Printar();
		Console.WriteLine("opa123");
		await modal.ShowAsync();
	}

	public void OnValidSubmit()
	{
	}

	private Modal modal = default!;

	private async Task OnShowModalClick()
	{
		await modal.ShowAsync();
	}

	private async Task OnHideModalClick()
	{
		await modal.HideAsync();
	}
}
